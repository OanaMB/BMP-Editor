 Acest program contine un "parser" care, in functie de ce se citeste din fisierul de input, modifica o imagine de tipul BMP file: exista mai multe functii, "edit", care incarca imaginea intr-un loader, adica citeste fiserul binar,"save", care salveaza intr-un alt fisier imaginea, "quit" care dezaloca memoria folosita, "insert" care insereaza de la o anumita coordonata o imagine peste cea din edit mode.
 Pentru parser, am citit din fisierul de input pana la EOF, fiecare linie fiind trecuta in variabila comanda. In sirul de caractere file, am salvat numele imaginii care urma sa fie folosita, de asemnea am extras intr-un vector de numere toti parametrii necesari ulterior, precum coordonatele de la care se vor insera imaginile. Apoi intram in functia "tipcom" care in functie de comanda gasita, va executa o functie. In functia "edit",deschidem imaginea cu "fopen", apoi initializam o variabila struct "imageinfo", de tipul Bitmap( care cuprinde toate informatiile legate de fileheader, infoheader si matricea de pixeli). Citim din fisierul imagine file si info header, dupa care, cu ajutorul functiei fseek, ignoram numarul de oncteti alocati headerului, ca sa alocam dinamic si citim matricea de pixeli, fara sa uitam de padding, care trebuie ignorat cu fseek dupa fiecare linie. Salvam in variabila Bitmap "image" rezultatele din functia edit pentru a le folosi ulterior.
 In functia "save", citim fisierul de output in modul scriere si folosim functia fwrite pentru a adauga informatiile salvate in "image" in fiserul nou. De asemnea adaugam si padding-ul, folosind acceasi formula folosita anterior.Cu functia "quit" eliberam memoria alocate matricei de pixeli.
 In functia "insert" am atribuit variabilelor y si x coordonatele citite in vector. Folosind doua for-uri, incepem sa atribuim toate elementele din matricea care se insereaza in matricea editata, de la coordonatele mentionate. O facem fie pana cand am introdus toata matricea , fie pana cand am ajuns la linia/coloana maxima a matricei celei mai mari.
 Pentru functiile in care vom desena pe imagine, a fost introdusa o noua variabila in structura bitmap "pencil",care este de tip Pencil, care retine culoarea si grosimea creionului cu care vom desena. In functia line, mai intai am verificat daca nu cumva coordonatele punctelor folosite sunt "out of bounds". Dupa aceea, sunt analizate toate cazurile in care o linie ar putea fi trasata: orizontal, vertical si oblic. In fiecare dintre acestea, am introdus functia "punct", care "creeaza" o "matrice" in jurul unui punct de pe linie, adica atribuie tuturor pixelilor din matricea imagine culorile salvate in variabila de tip Pencil, intre anumite dimensiuni care se afla in functie de grosimea creionului. In functia rectangle, vectorul de intregi stocheaza coordonatele tuturor varfurilor unui dreptunghi pe rand, pentru a forma o linie orizontala sau verticala. Functia triangle este asemanatoare functiei rectangle.
 Pentru functia fill, am memorat in variabilele RedNow, GreenNow, BlueNow valorile BGR care vor fi schimbate, dupa care am apelat functia fillonepixel, care verifica daca culoarea unui pixel, incepand de la coordonatele de start, este aceeasi cu culoarea care trebuie schimbata. Daca da, atunci culorile vor fi schimbate cu cele salvate in variabila struct Colorspixel. Dupa aceea, functia va fi apelata recursiv pentru toate punctele adiacente punctului (x,y). Algoritmul se va opri fie pana cand va iesi din valorile maxime ale matricii(out of bounds) fie pana cand nu va mai fi gasit niciun punct adiacent si care are culorile de schimbat.
